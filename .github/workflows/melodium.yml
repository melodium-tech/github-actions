name: Mélodium Workflow

on:
  workflow_call:
    inputs:
      command:
        type: string
        required: false
        default: run .melodium-ci/Compo.toml
        description: 'The Mélodium command to run'
      melodium_images_pull_source:
        type: string
        required: false
        default: 'melodium'
        description: 'Source to use for Mélodium container images'
      version:
        type: string
        required: false
        default: 0.9.0-pre.1
        description: 'The Mélodium version to use (should usually be the same as the workflow)'
      edition:
        type: string
        required: false
        default: alpine
        description: 'The Mélodium edition to use'

      repository:
        type: string
        required: true
        description: '_From actions/checkout@v4_ Repository name with owner. For example, actions/checkout'
        default: ${{ github.repository }}
      ref:
        type: string
        required: false
        description: >
          _From actions/checkout@v4_ The branch, tag or SHA to checkout. When checking out the repository that
          triggered a workflow, this defaults to the reference or SHA for that
          event.  Otherwise, uses the default branch.
      ssh-key:
        type: string
        description: >
          _From actions/checkout@v4_ SSH key used to fetch the repository. The SSH key is configured with the local
          git config, which enables your scripts to run authenticated git commands.
          The post-job step removes the SSH key.


          We recommend using a service account with the least permissions necessary.


          [Learn more about creating and using
          encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
      ssh-known-hosts:
        type: string
        description: >
          _From actions/checkout@v4_ Known hosts in addition to the user and global host key database. The public
          SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,
          `ssh-keyscan github.com`. The public key for github.com is always implicitly added.
      ssh-strict:
        type: boolean
        description: >
          _From actions/checkout@v4_ Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`
          and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to
          configure additional hosts.
        default: true
      ssh-user:
        type: string
        description: >
          _From actions/checkout@v4_ The user to use when connecting to the remote SSH host. By default 'git' is used.
        default: git
      persist-credentials:
        type: boolean
        description: '_From actions/checkout@v4_ Whether to configure the token or SSH key with the local git config'
        default: true
      path:
        type: string
        description: '_From actions/checkout@v4_ Relative path under $GITHUB_WORKSPACE to place the repository'
      clean:
        type: boolean
        description: '_From actions/checkout@v4_ Whether to execute `git clean -ffdx && git reset --hard HEAD` before fetching'
        default: true
      filter:
        type: string
        required: false
        description: >
          _From actions/checkout@v4_ Partially clone against a given filter.
          Overrides sparse-checkout if set.
      sparse-checkout:
        type: string
        required: false
        description: >
          _From actions/checkout@v4_ Do a sparse checkout on given patterns.
          Each pattern should be separated with new lines.
      sparse-checkout-cone-mode:
        type: boolean
        description: >
          _From actions/checkout@v4_ Specifies whether to use cone-mode when doing a sparse checkout.
        default: true
      fetch-depth:
        type: number
        description: '_From actions/checkout@v4_ Number of commits to fetch. 0 indicates all history for all branches and tags.'
        default: 1
      fetch-tags:
        type: boolean
        description: '_From actions/checkout@v4_ Whether to fetch tags, even if fetch-depth > 0.'
        default: false
      show-progress:
        type: boolean
        description: '_From actions/checkout@v4_ Whether to show progress status output when fetching.'
        default: true
      lfs:
        type: boolean
        description: '_From actions/checkout@v4_ Whether to download Git-LFS files'
        default: false
      submodules:
        type: boolean
        description: >
          _From actions/checkout@v4_ Whether to checkout submodules: `true` to checkout submodules or `recursive` to
          recursively checkout submodules.


          When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are
          converted to HTTPS.
        default: false
      set-safe-directory:
        type: boolean
        description: _From actions/checkout@v4_ Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory <path>`
        default: true
      github-server-url:
        type: boolean
        description: _From actions/checkout@v4_ The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com
        required: false
    secrets:
      token:
        required: true
        description: >
          _From actions/checkout@v4_ Personal access token (PAT) used to fetch the repository. The PAT is configured
          with the local git config, which enables your scripts to run authenticated git
          commands. The post-job step removes the PAT.


          We recommend using a service account with the least permissions necessary.
          Also when generating a new PAT, select the least scopes necessary.


          [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
    
jobs:
  melodium:
    runs-on: ubuntu-latest
    container:
        image: ${{ inputs.melodium_images_pull_source }}/melodium:${{ inputs.version }}-${{ inputs.edition }}
        env:
          MELODIUM_IMAGES_PULL_SOURCE: ${{ inputs.melodium_images_pull_source }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
          token: ${{ secrets.token }}
          ssh-key: ${{ inputs.ssh-key }}
          ssh-known-hosts: ${{ inputs.ssh-known-hosts }}
          ssh-strict: ${{ inputs.ssh-strict }}
          ssh-user: ${{ inputs.ssh-user }}
          persist-credentials: ${{ inputs.persist-credentials }}
          path: ${{ inputs.path }}
          clean: ${{ inputs.clean }}
          filter: ${{ inputs.filter }}
          sparse-checkout: ${{ inputs.sparse-checkout }}
          sparse-checkout-cone-mode: ${{ inputs.sparse-checkout-cone-mode }}
          fetch-depth: ${{ inputs.fetch-depth }}
          fetch-tags: ${{ inputs.fetch-tags }}
          show-progress: ${{ inputs.show-progress }}
          lfs: ${{ inputs.lfs }}
          submodules: ${{ inputs.submodules }}
      - name: Run Mélodium
        run: melodium ${{ inputs.command }}